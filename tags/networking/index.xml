<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Networking on Examples of Functional Reactive Programming - in Swift</title>
    <link>http://www.reactivebyexample.com/tags/networking/</link>
    <description>Recent content in Networking on Examples of Functional Reactive Programming - in Swift</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 19 May 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://www.reactivebyexample.com/tags/networking/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Chaining multiple network requests</title>
      <link>http://www.reactivebyexample.com/chaining-network-requests/</link>
      <pubDate>Thu, 19 May 2016 00:00:00 +0000</pubDate>
      
      <guid>http://www.reactivebyexample.com/chaining-network-requests/</guid>
      <description>

&lt;p&gt;FRP promises a lot of things.  During the first talk I saw about ReactiveCocoa, I was shown that it could chain network operations.  That sounded awesome, as I really don&amp;rsquo;t like asynchronous callback hell.&lt;/p&gt;

&lt;p&gt;So here&amp;rsquo;s a recipe for how to sequentially request a &lt;code&gt;/user&lt;/code&gt; network resource and then, using part of that response subsequently call a &lt;code&gt;/posts&lt;/code&gt; network resource.  Take a look at the whole thing and then we&amp;rsquo;ll walk through the key points.&lt;/p&gt;

&lt;script type=&#34;text/javascript&#34; src=&#34;http://gist.github.com/ee1d466cfc56c288926117fd9a07080b.js&#34;&gt;&lt;/script&gt;


&lt;h3 id=&#34;what-did-you-just-do-above:a27a27d9e041b532ade53abd615613f1&#34;&gt;What did you just do above?&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Wrap up the work for a call to &lt;code&gt;/users&lt;/code&gt; in a SignalProducer.  This is a sequence of events which you want to control, hence it is a &amp;ldquo;cold&amp;rdquo; signal which in RAC is achieved with a &amp;lsquo;SignalProducer&amp;rsquo;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Run &lt;code&gt;flatMap&lt;/code&gt; on the users SignalProducer.  If you take a look at the &lt;a href=&#34;https://github.com/ReactiveCocoa/ReactiveCocoa/blob/5cfcdccdcc693e7d685b4f7b7cf2c2ccf5c59c8d/ReactiveCocoa/Swift/Flatten.swift#L732&#34;&gt;docs for flatMap&lt;/a&gt; you&amp;rsquo;ll see the following:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;public func flatMap&amp;lt;U&amp;gt;(strategy: FlattenStrategy, transform: Value -&amp;gt; SignalProducer&amp;lt;U, Error&amp;gt;) -&amp;gt; Signal&amp;lt;U, Error&amp;gt;

/// Maps each event from `signal` to a new signal, then flattens the
/// resulting producers (into a signal of values), according to the
/// semantics of the given strategy.
///
/// If `signal` or any of the created producers fail, the returned signal
/// will forward that failure immediately.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So in this case, the &lt;code&gt;signal&lt;/code&gt; referred to is the signal from your &lt;code&gt;users&lt;/code&gt; request.  It will only have 1 &amp;lsquo;event&amp;rsquo; (success with an API response, or failure) so the closure we provided for &lt;code&gt;transform&lt;/code&gt; is called only once.  In this closure we will take an &amp;lsquo;event&amp;rsquo;, being the result of the &lt;code&gt;users&lt;/code&gt; request, and then &amp;lsquo;map&amp;rsquo; it to a new signal, namely the &lt;code&gt;posts&lt;/code&gt; request signal which is dependent on the value of the retrieved &lt;code&gt;userID&lt;/code&gt;.  Lastly we provide a &amp;lsquo;strategy&amp;rsquo; parameter to &lt;code&gt;flatMap&lt;/code&gt;.  Suffice to say, if you&amp;rsquo;re just chaining vanilla network requests then this can be glossed over and you can simply specify &lt;code&gt;.Latest&lt;/code&gt; for this value.  In another post, I&amp;rsquo;ll cover the semantics of different &amp;lsquo;flatten&amp;rsquo; strategies.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;start&lt;/code&gt; the resulting signal which performs the &lt;code&gt;user&lt;/code&gt; request in order to &amp;lsquo;map&amp;rsquo; its event, and then performs the &lt;code&gt;posts&lt;/code&gt; request using the result.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hope this has helped!  RAC can be challenging and difficult to understand at first, but after a while you&amp;rsquo;ll find that it can make programming awesome.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>